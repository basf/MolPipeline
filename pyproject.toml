[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
dynamic = ["version"]
name = "molpipeline"
authors = [
    {name = "Christian W. Feldmann"},
    {name = "Jennifer Hemmerich"},
    {name = "Jochen Sieg"}
]
description = "Integration of rdkit functionality into sklearn pipelines."
readme = "README.md"
dependencies = [
    "joblib>=1.3.0",
    "loguru>=0.7.3",
    "matplotlib>=3.10.1",
    "numpy>=1.26.4",
    "pandas>=2.2.3",
    "rdkit>=2023.9.1",
    "scikit-learn>=1.6.0",
    "scipy>=1.15.2",
    "shap>=0.47.1",
    "typing-extensions>=4.13.1",
]

[project.optional-dependencies]
chemprop = [
    "chemprop>=2.0.3,<=2.0.4",
    "lightning>=2.5.1",
]
notebooks = [
    "jupyterlab>=4.4.0",
    "seaborn>=0.13.2",
]

[tool.bandit]
exclude_dirs = [".venv"]

[tool.ruff.lint]
preview = true
select =  [
    "A",     # flake8-buildins
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "COM",   # flake8-commas
    "D",     # pydocstyle
    "DOC",   # pydoclint
    "E",     # pycodestyle - errors
    "ERA",   # eradicate
    "F",     # pyflakes
    "FA",    # flake8-funny-annotations
    "FIX",   # flake8-fixme
    "FLY",   # flake8-flynt
    "FURB",  # refurb
    "I",     # isort
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "N",     # pep8-naming
    "NPY",   # numpy-specific rules
    "PD",    # pandas-vet
    "PERF",  # perflint
    "PGH",   # pygrep-hook
    "PIE",   # flake8-pie
    "PL",    # pylint
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RUF",   # ruff specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "TC",    # flake8-type-checking
    "TD",    # flake8-todo
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "TID",   # flake8-tidy-imports
    "UP",    # pyupgrade
    "W",     # pycodestyle - warnings
]
ignore = [
    "ANN001",  # Missing type annotation for function argument `X`  # TO REMOVE
    "ANN201",  # Missing return type annotation for public function
    "ANN204",  #  Missing return type annotation for special method
    "ANN401",  #  Allow  typing.Any
    "ARG002", #  Unused argument  # TO REMOVE
    "B008",   #  Do not perform function call `StandardScaler` in argument defaults  # TO REMOVE
    "B020",   #  Loop control variable `generated_smiles` overrides iterable it iterates  # TO REMOVE
    "COM812", # Trailing comma missing # TO REMOVE
    "DOC202", # Docstring should not have a returns section because the function doesn't return anything  # TO REMOVE
    "D203", # 1 blank line required before class docstring
    "D213", # blank-line-before-class-docstring
    "D413", # missing-blank-line-after-last-section # TO REMOVE
    "D418", # Function decorated with `@overload` shouldn't contain a docstring"
    "E501", # line-too-long # TO REMOVE
    "ERA001",  # Found commented-out code  # TO REMOVE
    "FA100",  # Add `from __future__ import annotations`  # TO REMOVE
    "FA102",  # Missing `from __future__ import annotations`  # TO REMOVE
    "FURB171", # [*] Membership test against single-item container  # TO REMOVE
    "FURB177", #  Prefer `Path.cwd()` over `Path().resolve()  # TO REMOVE
    "N803",  #  Argument name should be lowercase  # TO REMOVE
    "N806",  #  Variable in function should be lowercase  # TO REMOVE
    "N813",  #  Camelcase `rdFingerprintGenerator` imported as lowercase `rdkit_fp`  # TO REMOVE
    "PD011",   # Use `.to_numpy()` instead of `.values`
    "PD901",   #  Avoid using the generic variable name `df` for DataFrames  # TO REMOVE
    "PGH003",  # Blanket type ignore for types
    "PERF203",  # `try`-`except` within a loop incurs performance overhead  # TO REMOVE
    "PERF401", # Use a list comprehension to create a transformed list  # TO REMOVE
    "PIE804",  # Unnecessary `dict` kwargs  # TO REMOVE
    "PLC1901", # `rest == ""` can be simplified to `not rest` as an empty string is falsey  # TO REMOVE
    "PLR0911", # Too many return statements (8 > 6)  # TO REMOVE
    "PLR0913", # too-many-arguments
    "PLR2004", # Magic value used in comparison  # TO REMOVE
    "PLC2701", # Private name import  # TO REMOVE
    "PLR0917", # too-many-positional-arguments   # TO REMOVE
    "PLR6301", #  could be a function, class method, or static method # TO REMOVE
    "PLW2901", # Redefined loop variable
    "PLW3201", #  Dunder method `xxxx` has no special meaning  # TO REMOVE
    "PTH123",  # `open()` should be replaced by `Path.open()`  # TO REMOVE
    "PTH201",  # Do not pass the current directory explicitly to `Path`  # TO REMOVE
    "PYI018",  # Private TypeVar `_T` is never used  # TO REMOVE
    "PYI056",  # Calling `.append()` on `__all__` may not be supported by all type checkers # TO REMOVE
    "RET504",  # Unnecessary assignment  # TO REMOVE
    "RUF005",  # Consider iterable unpacking instead of concatenation  # TO REMOVE
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`  # TO REMOVE
    "RUF100", #  Unused noqa  # TO REMOVE
    "S101",   # Use of `assert` detected  # TO REMOVE
    "S311",  #  suspicious-non-cryptographic-random-usage
    "SIM102",  # Use a single `if` statement instead of nested `if` statements # TO REMOVE
    "SIM103",  # Return the condition directly  # TO REMOVE
    "SIM108",  # Use ternary operator  # TO REMOVE
    "SIM110",  # Use return any() instead of `for` loop  # TO REMOVE
    "SIM114",  # Combine `if` branches  # TO REMOVE
    "SIM117",  # Use a single `with` statement with multiple contexts instead of nested `with` statements  # TO REMOVE
    "SLF001",  # Private member accessed  # TO REMOVE
    "T201",    # print found  # TO REMOVE
    "TC001",   # Move application import  `xxx` into a type-checking block  # TO REMOVE
    "TC002",   # Move third-party import `xxx` into a type-checking block  # TO REMOVE
    "TC003",   # Move standard library import `xxx` into a type-checking block  # TO REMOVE
]
 [tool.ruff.lint.per-file-ignores]
 "*.ipynb" = [
     "PLE1142",
     "F704",
     "T201"
 ]
 "test_*" = [
     "S101",
     "S404",
     "S603",
     "S607"
 ]

[tool.ruff.lint.pylint]
max-positional-args = 10

[tool.pyright]
reportAbstractUsage = "warning"
reportAssignmentType = "warning"
reportAttributeAccessIssue = "warning"
reportArgumentType = "warning"
reportCallIssue = "warning"
reportClassNotInstantiated = "reportIndexIssue"
reportGeneralTypeIssues = "warning"
reportIncompatibleMethodOverride = "warning"
reportInvalidTypeForm = "warning"
reportIndexIssue = "warning"
reportMissingImports = "warning"
reportMissingTypeStubs = "warning"
reportOptionalMemberAccess = "warning"
reportOptionalSubscript = "warning"
reportPossiblyUnboundVariable = "warning"
reportPrivateImportUsage = "warning"
reportRedeclaration = "warning"
reportReturnType = "warning"
reportUnhashable = "warning"
venvPath = "."
venv = ".venv"
pythonVersion = "3.11"

[tool.setuptools.dynamic]
version = {attr = "molpipeline.__version__"}


[tool.setuptools.packages.find]
exclude = ["tests", "docs"]

[tool.setuptools.package-data]
"molpipeline" = ["py.typed"]

[dependency-groups]
dev = [
    "bandit>=1.8.3",
    "black[jupyter]>=25.1.0",
    "coverage>=7.8.0",
    "docsig>=0.69.3",
    "flake8>=7.2.0",
    "interrogate>=1.7.0",
    "isort>=6.0.1",
    "mypy>=1.15.0",
    "pydocstyle>=6.3.0",
    "pylint>=3.3.6",
    "pyright>=1.1.399",
    "rdkit-stubs>=0.8",
    "ruff>=0.11.4",
]
